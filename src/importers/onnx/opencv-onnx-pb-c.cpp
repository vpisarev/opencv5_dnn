/* Generated by the protocol buffer compiler. DO NOT EDIT! */
/* Generated from: https://github.com/onnx/onnx/blob/main/onnx/onnx.proto3 */

/* Do not generate deprecated warnings for self */
#ifndef PROTOBUF_C__NO_DEPRECATED
#define PROTOBUF_C__NO_DEPRECATED
#endif

#include "opencv-onnx-pb-c.h"
void   opencv_onnx__attribute_proto__init
                     (OpenCVOnnx__AttributeProto         *message)
{
  static const OpenCVOnnx__AttributeProto init_value = OPENCV_ONNX__ATTRIBUTE_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__attribute_proto__get_packed_size
                     (const OpenCVOnnx__AttributeProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__attribute_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__attribute_proto__pack
                     (const OpenCVOnnx__AttributeProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__attribute_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__attribute_proto__pack_to_buffer
                     (const OpenCVOnnx__AttributeProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__attribute_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__AttributeProto *
       opencv_onnx__attribute_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__AttributeProto *)
     protobuf_c_message_unpack (&opencv_onnx__attribute_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__attribute_proto__free_unpacked
                     (OpenCVOnnx__AttributeProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__attribute_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__value_info_proto__init
                     (OpenCVOnnx__ValueInfoProto         *message)
{
  static const OpenCVOnnx__ValueInfoProto init_value = OPENCV_ONNX__VALUE_INFO_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__value_info_proto__get_packed_size
                     (const OpenCVOnnx__ValueInfoProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__value_info_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__value_info_proto__pack
                     (const OpenCVOnnx__ValueInfoProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__value_info_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__value_info_proto__pack_to_buffer
                     (const OpenCVOnnx__ValueInfoProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__value_info_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__ValueInfoProto *
       opencv_onnx__value_info_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__ValueInfoProto *)
     protobuf_c_message_unpack (&opencv_onnx__value_info_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__value_info_proto__free_unpacked
                     (OpenCVOnnx__ValueInfoProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__value_info_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__node_proto__init
                     (OpenCVOnnx__NodeProto         *message)
{
  static const OpenCVOnnx__NodeProto init_value = OPENCV_ONNX__NODE_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__node_proto__get_packed_size
                     (const OpenCVOnnx__NodeProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__node_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__node_proto__pack
                     (const OpenCVOnnx__NodeProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__node_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__node_proto__pack_to_buffer
                     (const OpenCVOnnx__NodeProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__node_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__NodeProto *
       opencv_onnx__node_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__NodeProto *)
     protobuf_c_message_unpack (&opencv_onnx__node_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__node_proto__free_unpacked
                     (OpenCVOnnx__NodeProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__node_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__training_info_proto__init
                     (OpenCVOnnx__TrainingInfoProto         *message)
{
  static const OpenCVOnnx__TrainingInfoProto init_value = OPENCV_ONNX__TRAINING_INFO_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__training_info_proto__get_packed_size
                     (const OpenCVOnnx__TrainingInfoProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__training_info_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__training_info_proto__pack
                     (const OpenCVOnnx__TrainingInfoProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__training_info_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__training_info_proto__pack_to_buffer
                     (const OpenCVOnnx__TrainingInfoProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__training_info_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__TrainingInfoProto *
       opencv_onnx__training_info_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__TrainingInfoProto *)
     protobuf_c_message_unpack (&opencv_onnx__training_info_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__training_info_proto__free_unpacked
                     (OpenCVOnnx__TrainingInfoProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__training_info_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__model_proto__init
                     (OpenCVOnnx__ModelProto         *message)
{
  static const OpenCVOnnx__ModelProto init_value = OPENCV_ONNX__MODEL_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__model_proto__get_packed_size
                     (const OpenCVOnnx__ModelProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__model_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__model_proto__pack
                     (const OpenCVOnnx__ModelProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__model_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__model_proto__pack_to_buffer
                     (const OpenCVOnnx__ModelProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__model_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__ModelProto *
       opencv_onnx__model_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__ModelProto *)
     protobuf_c_message_unpack (&opencv_onnx__model_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__model_proto__free_unpacked
                     (OpenCVOnnx__ModelProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__model_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__string_string_entry_proto__init
                     (OpenCVOnnx__StringStringEntryProto         *message)
{
  static const OpenCVOnnx__StringStringEntryProto init_value = OPENCV_ONNX__STRING_STRING_ENTRY_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__string_string_entry_proto__get_packed_size
                     (const OpenCVOnnx__StringStringEntryProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__string_string_entry_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__string_string_entry_proto__pack
                     (const OpenCVOnnx__StringStringEntryProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__string_string_entry_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__string_string_entry_proto__pack_to_buffer
                     (const OpenCVOnnx__StringStringEntryProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__string_string_entry_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__StringStringEntryProto *
       opencv_onnx__string_string_entry_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__StringStringEntryProto *)
     protobuf_c_message_unpack (&opencv_onnx__string_string_entry_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__string_string_entry_proto__free_unpacked
                     (OpenCVOnnx__StringStringEntryProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__string_string_entry_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__tensor_annotation__init
                     (OpenCVOnnx__TensorAnnotation         *message)
{
  static const OpenCVOnnx__TensorAnnotation init_value = OPENCV_ONNX__TENSOR_ANNOTATION__INIT;
  *message = init_value;
}
size_t opencv_onnx__tensor_annotation__get_packed_size
                     (const OpenCVOnnx__TensorAnnotation *message)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_annotation__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__tensor_annotation__pack
                     (const OpenCVOnnx__TensorAnnotation *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_annotation__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__tensor_annotation__pack_to_buffer
                     (const OpenCVOnnx__TensorAnnotation *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_annotation__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__TensorAnnotation *
       opencv_onnx__tensor_annotation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__TensorAnnotation *)
     protobuf_c_message_unpack (&opencv_onnx__tensor_annotation__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__tensor_annotation__free_unpacked
                     (OpenCVOnnx__TensorAnnotation *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__tensor_annotation__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__graph_proto__init
                     (OpenCVOnnx__GraphProto         *message)
{
  static const OpenCVOnnx__GraphProto init_value = OPENCV_ONNX__GRAPH_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__graph_proto__get_packed_size
                     (const OpenCVOnnx__GraphProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__graph_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__graph_proto__pack
                     (const OpenCVOnnx__GraphProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__graph_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__graph_proto__pack_to_buffer
                     (const OpenCVOnnx__GraphProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__graph_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__GraphProto *
       opencv_onnx__graph_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__GraphProto *)
     protobuf_c_message_unpack (&opencv_onnx__graph_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__graph_proto__free_unpacked
                     (OpenCVOnnx__GraphProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__graph_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__tensor_proto__segment__init
                     (OpenCVOnnx__TensorProto__Segment         *message)
{
  static const OpenCVOnnx__TensorProto__Segment init_value = OPENCV_ONNX__TENSOR_PROTO__SEGMENT__INIT;
  *message = init_value;
}
void   opencv_onnx__tensor_proto__init
                     (OpenCVOnnx__TensorProto         *message)
{
  static const OpenCVOnnx__TensorProto init_value = OPENCV_ONNX__TENSOR_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__tensor_proto__get_packed_size
                     (const OpenCVOnnx__TensorProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__tensor_proto__pack
                     (const OpenCVOnnx__TensorProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__tensor_proto__pack_to_buffer
                     (const OpenCVOnnx__TensorProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__TensorProto *
       opencv_onnx__tensor_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__TensorProto *)
     protobuf_c_message_unpack (&opencv_onnx__tensor_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__tensor_proto__free_unpacked
                     (OpenCVOnnx__TensorProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__tensor_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__sparse_tensor_proto__init
                     (OpenCVOnnx__SparseTensorProto         *message)
{
  static const OpenCVOnnx__SparseTensorProto init_value = OPENCV_ONNX__SPARSE_TENSOR_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__sparse_tensor_proto__get_packed_size
                     (const OpenCVOnnx__SparseTensorProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__sparse_tensor_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__sparse_tensor_proto__pack
                     (const OpenCVOnnx__SparseTensorProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__sparse_tensor_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__sparse_tensor_proto__pack_to_buffer
                     (const OpenCVOnnx__SparseTensorProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__sparse_tensor_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__SparseTensorProto *
       opencv_onnx__sparse_tensor_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__SparseTensorProto *)
     protobuf_c_message_unpack (&opencv_onnx__sparse_tensor_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__sparse_tensor_proto__free_unpacked
                     (OpenCVOnnx__SparseTensorProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__sparse_tensor_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__tensor_shape_proto__dimension__init
                     (OpenCVOnnx__TensorShapeProto__Dimension         *message)
{
  static const OpenCVOnnx__TensorShapeProto__Dimension init_value = OPENCV_ONNX__TENSOR_SHAPE_PROTO__DIMENSION__INIT;
  *message = init_value;
}
void   opencv_onnx__tensor_shape_proto__init
                     (OpenCVOnnx__TensorShapeProto         *message)
{
  static const OpenCVOnnx__TensorShapeProto init_value = OPENCV_ONNX__TENSOR_SHAPE_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__tensor_shape_proto__get_packed_size
                     (const OpenCVOnnx__TensorShapeProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_shape_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__tensor_shape_proto__pack
                     (const OpenCVOnnx__TensorShapeProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_shape_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__tensor_shape_proto__pack_to_buffer
                     (const OpenCVOnnx__TensorShapeProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__tensor_shape_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__TensorShapeProto *
       opencv_onnx__tensor_shape_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__TensorShapeProto *)
     protobuf_c_message_unpack (&opencv_onnx__tensor_shape_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__tensor_shape_proto__free_unpacked
                     (OpenCVOnnx__TensorShapeProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__tensor_shape_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__type_proto__tensor__init
                     (OpenCVOnnx__TypeProto__Tensor         *message)
{
  static const OpenCVOnnx__TypeProto__Tensor init_value = OPENCV_ONNX__TYPE_PROTO__TENSOR__INIT;
  *message = init_value;
}
void   opencv_onnx__type_proto__sequence__init
                     (OpenCVOnnx__TypeProto__Sequence         *message)
{
  static const OpenCVOnnx__TypeProto__Sequence init_value = OPENCV_ONNX__TYPE_PROTO__SEQUENCE__INIT;
  *message = init_value;
}
void   opencv_onnx__type_proto__map__init
                     (OpenCVOnnx__TypeProto__Map         *message)
{
  static const OpenCVOnnx__TypeProto__Map init_value = OPENCV_ONNX__TYPE_PROTO__MAP__INIT;
  *message = init_value;
}
void   opencv_onnx__type_proto__optional__init
                     (OpenCVOnnx__TypeProto__Optional         *message)
{
  static const OpenCVOnnx__TypeProto__Optional init_value = OPENCV_ONNX__TYPE_PROTO__OPTIONAL__INIT;
  *message = init_value;
}
void   opencv_onnx__type_proto__sparse_tensor__init
                     (OpenCVOnnx__TypeProto__SparseTensor         *message)
{
  static const OpenCVOnnx__TypeProto__SparseTensor init_value = OPENCV_ONNX__TYPE_PROTO__SPARSE_TENSOR__INIT;
  *message = init_value;
}
void   opencv_onnx__type_proto__init
                     (OpenCVOnnx__TypeProto         *message)
{
  static const OpenCVOnnx__TypeProto init_value = OPENCV_ONNX__TYPE_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__type_proto__get_packed_size
                     (const OpenCVOnnx__TypeProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__type_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__type_proto__pack
                     (const OpenCVOnnx__TypeProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__type_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__type_proto__pack_to_buffer
                     (const OpenCVOnnx__TypeProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__type_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__TypeProto *
       opencv_onnx__type_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__TypeProto *)
     protobuf_c_message_unpack (&opencv_onnx__type_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__type_proto__free_unpacked
                     (OpenCVOnnx__TypeProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__type_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__operator_set_id_proto__init
                     (OpenCVOnnx__OperatorSetIdProto         *message)
{
  static const OpenCVOnnx__OperatorSetIdProto init_value = OPENCV_ONNX__OPERATOR_SET_ID_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__operator_set_id_proto__get_packed_size
                     (const OpenCVOnnx__OperatorSetIdProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__operator_set_id_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__operator_set_id_proto__pack
                     (const OpenCVOnnx__OperatorSetIdProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__operator_set_id_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__operator_set_id_proto__pack_to_buffer
                     (const OpenCVOnnx__OperatorSetIdProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__operator_set_id_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__OperatorSetIdProto *
       opencv_onnx__operator_set_id_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__OperatorSetIdProto *)
     protobuf_c_message_unpack (&opencv_onnx__operator_set_id_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__operator_set_id_proto__free_unpacked
                     (OpenCVOnnx__OperatorSetIdProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__operator_set_id_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
void   opencv_onnx__function_proto__init
                     (OpenCVOnnx__FunctionProto         *message)
{
  static const OpenCVOnnx__FunctionProto init_value = OPENCV_ONNX__FUNCTION_PROTO__INIT;
  *message = init_value;
}
size_t opencv_onnx__function_proto__get_packed_size
                     (const OpenCVOnnx__FunctionProto *message)
{
  assert(message->base.descriptor == &opencv_onnx__function_proto__descriptor);
  return protobuf_c_message_get_packed_size ((const ProtobufCMessage*)(message));
}
size_t opencv_onnx__function_proto__pack
                     (const OpenCVOnnx__FunctionProto *message,
                      uint8_t       *out)
{
  assert(message->base.descriptor == &opencv_onnx__function_proto__descriptor);
  return protobuf_c_message_pack ((const ProtobufCMessage*)message, out);
}
size_t opencv_onnx__function_proto__pack_to_buffer
                     (const OpenCVOnnx__FunctionProto *message,
                      ProtobufCBuffer *buffer)
{
  assert(message->base.descriptor == &opencv_onnx__function_proto__descriptor);
  return protobuf_c_message_pack_to_buffer ((const ProtobufCMessage*)message, buffer);
}
OpenCVOnnx__FunctionProto *
       opencv_onnx__function_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data)
{
  return (OpenCVOnnx__FunctionProto *)
     protobuf_c_message_unpack (&opencv_onnx__function_proto__descriptor,
                                allocator, len, data);
}
void   opencv_onnx__function_proto__free_unpacked
                     (OpenCVOnnx__FunctionProto *message,
                      ProtobufCAllocator *allocator)
{
  if(!message)
    return;
  assert(message->base.descriptor == &opencv_onnx__function_proto__descriptor);
  protobuf_c_message_free_unpacked ((ProtobufCMessage*)message, allocator);
}
static const ProtobufCEnumValue opencv_onnx__attribute_proto__attribute_type__enum_values_by_number[15] =
{
  { "UNDEFINED", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__UNDEFINED", 0 },
  { "FLOAT", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__FLOAT", 1 },
  { "INT", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__INT", 2 },
  { "STRING", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__STRING", 3 },
  { "TENSOR", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__TENSOR", 4 },
  { "GRAPH", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__GRAPH", 5 },
  { "FLOATS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__FLOATS", 6 },
  { "INTS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__INTS", 7 },
  { "STRINGS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__STRINGS", 8 },
  { "TENSORS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__TENSORS", 9 },
  { "GRAPHS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__GRAPHS", 10 },
  { "SPARSE_TENSOR", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__SPARSE_TENSOR", 11 },
  { "SPARSE_TENSORS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__SPARSE_TENSORS", 12 },
  { "TYPE_PROTO", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__TYPE_PROTO", 13 },
  { "TYPE_PROTOS", "OPENCV_ONNX__ATTRIBUTE_PROTO__ATTRIBUTE_TYPE__TYPE_PROTOS", 14 },
};
static const ProtobufCIntRange opencv_onnx__attribute_proto__attribute_type__value_ranges[] = {
{0, 0},{0, 15}
};
static const ProtobufCEnumValueIndex opencv_onnx__attribute_proto__attribute_type__enum_values_by_name[15] =
{
  { "FLOAT", 1 },
  { "FLOATS", 6 },
  { "GRAPH", 5 },
  { "GRAPHS", 10 },
  { "INT", 2 },
  { "INTS", 7 },
  { "SPARSE_TENSOR", 11 },
  { "SPARSE_TENSORS", 12 },
  { "STRING", 3 },
  { "STRINGS", 8 },
  { "TENSOR", 4 },
  { "TENSORS", 9 },
  { "TYPE_PROTO", 13 },
  { "TYPE_PROTOS", 14 },
  { "UNDEFINED", 0 },
};
const ProtobufCEnumDescriptor opencv_onnx__attribute_proto__attribute_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "opencv_onnx.AttributeProto.AttributeType",
  "AttributeType",
  "OpenCVOnnx__AttributeProto__AttributeType",
  "opencv_onnx",
  15,
  opencv_onnx__attribute_proto__attribute_type__enum_values_by_number,
  15,
  opencv_onnx__attribute_proto__attribute_type__enum_values_by_name,
  1,
  opencv_onnx__attribute_proto__attribute_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor opencv_onnx__attribute_proto__field_descriptors[18] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "f",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_FLOAT,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, f),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "i",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, i),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "s",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, s),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "t",
    5,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, t),
    &opencv_onnx__tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "g",
    6,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, g),
    &opencv_onnx__graph_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "floats",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(OpenCVOnnx__AttributeProto, n_floats),
    offsetof(OpenCVOnnx__AttributeProto, floats),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ints",
    8,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT64,
    offsetof(OpenCVOnnx__AttributeProto, n_ints),
    offsetof(OpenCVOnnx__AttributeProto, ints),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "strings",
    9,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(OpenCVOnnx__AttributeProto, n_strings),
    offsetof(OpenCVOnnx__AttributeProto, strings),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tensors",
    10,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__AttributeProto, n_tensors),
    offsetof(OpenCVOnnx__AttributeProto, tensors),
    &opencv_onnx__tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "graphs",
    11,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__AttributeProto, n_graphs),
    offsetof(OpenCVOnnx__AttributeProto, graphs),
    &opencv_onnx__graph_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    13,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "tp",
    14,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, tp),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "type_protos",
    15,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__AttributeProto, n_type_protos),
    offsetof(OpenCVOnnx__AttributeProto, type_protos),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "type",
    20,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_ENUM,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, type),
    &opencv_onnx__attribute_proto__attribute_type__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "ref_attr_name",
    21,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, ref_attr_name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sparse_tensor",
    22,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__AttributeProto, sparse_tensor),
    &opencv_onnx__sparse_tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sparse_tensors",
    23,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__AttributeProto, n_sparse_tensors),
    offsetof(OpenCVOnnx__AttributeProto, sparse_tensors),
    &opencv_onnx__sparse_tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__attribute_proto__field_indices_by_name[] = {
  11,   /* field[11] = doc_string */
  1,   /* field[1] = f */
  6,   /* field[6] = floats */
  5,   /* field[5] = g */
  10,   /* field[10] = graphs */
  2,   /* field[2] = i */
  7,   /* field[7] = ints */
  0,   /* field[0] = name */
  15,   /* field[15] = ref_attr_name */
  3,   /* field[3] = s */
  16,   /* field[16] = sparse_tensor */
  17,   /* field[17] = sparse_tensors */
  8,   /* field[8] = strings */
  4,   /* field[4] = t */
  9,   /* field[9] = tensors */
  12,   /* field[12] = tp */
  14,   /* field[14] = type */
  13,   /* field[13] = type_protos */
};
static const ProtobufCIntRange opencv_onnx__attribute_proto__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 13, 11 },
  { 20, 14 },
  { 0, 18 }
};
const ProtobufCMessageDescriptor opencv_onnx__attribute_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.AttributeProto",
  "AttributeProto",
  "OpenCVOnnx__AttributeProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__AttributeProto),
  18,
  opencv_onnx__attribute_proto__field_descriptors,
  opencv_onnx__attribute_proto__field_indices_by_name,
  3,  opencv_onnx__attribute_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__attribute_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__value_info_proto__field_descriptors[3] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ValueInfoProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "type",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ValueInfoProto, type),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ValueInfoProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__value_info_proto__field_indices_by_name[] = {
  2,   /* field[2] = doc_string */
  0,   /* field[0] = name */
  1,   /* field[1] = type */
};
static const ProtobufCIntRange opencv_onnx__value_info_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor opencv_onnx__value_info_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.ValueInfoProto",
  "ValueInfoProto",
  "OpenCVOnnx__ValueInfoProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__ValueInfoProto),
  3,
  opencv_onnx__value_info_proto__field_descriptors,
  opencv_onnx__value_info_proto__field_indices_by_name,
  1,  opencv_onnx__value_info_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__value_info_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__node_proto__field_descriptors[7] =
{
  {
    "input",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__NodeProto, n_input),
    offsetof(OpenCVOnnx__NodeProto, input),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "output",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__NodeProto, n_output),
    offsetof(OpenCVOnnx__NodeProto, output),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__NodeProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "op_type",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__NodeProto, op_type),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "attribute",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__NodeProto, n_attribute),
    offsetof(OpenCVOnnx__NodeProto, attribute),
    &opencv_onnx__attribute_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    6,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__NodeProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "domain",
    7,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__NodeProto, domain),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__node_proto__field_indices_by_name[] = {
  4,   /* field[4] = attribute */
  5,   /* field[5] = doc_string */
  6,   /* field[6] = domain */
  0,   /* field[0] = input */
  2,   /* field[2] = name */
  3,   /* field[3] = op_type */
  1,   /* field[1] = output */
};
static const ProtobufCIntRange opencv_onnx__node_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 7 }
};
const ProtobufCMessageDescriptor opencv_onnx__node_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.NodeProto",
  "NodeProto",
  "OpenCVOnnx__NodeProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__NodeProto),
  7,
  opencv_onnx__node_proto__field_descriptors,
  opencv_onnx__node_proto__field_indices_by_name,
  1,  opencv_onnx__node_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__node_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__training_info_proto__field_descriptors[4] =
{
  {
    "initialization",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TrainingInfoProto, initialization),
    &opencv_onnx__graph_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "algorithm",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TrainingInfoProto, algorithm),
    &opencv_onnx__graph_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "initialization_binding",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TrainingInfoProto, n_initialization_binding),
    offsetof(OpenCVOnnx__TrainingInfoProto, initialization_binding),
    &opencv_onnx__string_string_entry_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "update_binding",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TrainingInfoProto, n_update_binding),
    offsetof(OpenCVOnnx__TrainingInfoProto, update_binding),
    &opencv_onnx__string_string_entry_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__training_info_proto__field_indices_by_name[] = {
  1,   /* field[1] = algorithm */
  0,   /* field[0] = initialization */
  2,   /* field[2] = initialization_binding */
  3,   /* field[3] = update_binding */
};
static const ProtobufCIntRange opencv_onnx__training_info_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 4 }
};
const ProtobufCMessageDescriptor opencv_onnx__training_info_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TrainingInfoProto",
  "TrainingInfoProto",
  "OpenCVOnnx__TrainingInfoProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TrainingInfoProto),
  4,
  opencv_onnx__training_info_proto__field_descriptors,
  opencv_onnx__training_info_proto__field_indices_by_name,
  1,  opencv_onnx__training_info_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__training_info_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__model_proto__field_descriptors[11] =
{
  {
    "ir_version",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, ir_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "producer_name",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, producer_name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "producer_version",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, producer_version),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "domain",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, domain),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "model_version",
    5,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, model_version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    6,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "graph",
    7,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__ModelProto, graph),
    &opencv_onnx__graph_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "opset_import",
    8,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__ModelProto, n_opset_import),
    offsetof(OpenCVOnnx__ModelProto, opset_import),
    &opencv_onnx__operator_set_id_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "metadata_props",
    14,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__ModelProto, n_metadata_props),
    offsetof(OpenCVOnnx__ModelProto, metadata_props),
    &opencv_onnx__string_string_entry_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "training_info",
    20,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__ModelProto, n_training_info),
    offsetof(OpenCVOnnx__ModelProto, training_info),
    &opencv_onnx__training_info_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "functions",
    25,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__ModelProto, n_functions),
    offsetof(OpenCVOnnx__ModelProto, functions),
    &opencv_onnx__function_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__model_proto__field_indices_by_name[] = {
  5,   /* field[5] = doc_string */
  3,   /* field[3] = domain */
  10,   /* field[10] = functions */
  6,   /* field[6] = graph */
  0,   /* field[0] = ir_version */
  8,   /* field[8] = metadata_props */
  4,   /* field[4] = model_version */
  7,   /* field[7] = opset_import */
  1,   /* field[1] = producer_name */
  2,   /* field[2] = producer_version */
  9,   /* field[9] = training_info */
};
static const ProtobufCIntRange opencv_onnx__model_proto__number_ranges[4 + 1] =
{
  { 1, 0 },
  { 14, 8 },
  { 20, 9 },
  { 25, 10 },
  { 0, 11 }
};
const ProtobufCMessageDescriptor opencv_onnx__model_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.ModelProto",
  "ModelProto",
  "OpenCVOnnx__ModelProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__ModelProto),
  11,
  opencv_onnx__model_proto__field_descriptors,
  opencv_onnx__model_proto__field_indices_by_name,
  4,  opencv_onnx__model_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__model_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__string_string_entry_proto__field_descriptors[2] =
{
  {
    "key",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__StringStringEntryProto, key),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "value",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__StringStringEntryProto, value),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__string_string_entry_proto__field_indices_by_name[] = {
  0,   /* field[0] = key */
  1,   /* field[1] = value */
};
static const ProtobufCIntRange opencv_onnx__string_string_entry_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__string_string_entry_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.StringStringEntryProto",
  "StringStringEntryProto",
  "OpenCVOnnx__StringStringEntryProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__StringStringEntryProto),
  2,
  opencv_onnx__string_string_entry_proto__field_descriptors,
  opencv_onnx__string_string_entry_proto__field_indices_by_name,
  1,  opencv_onnx__string_string_entry_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__string_string_entry_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__tensor_annotation__field_descriptors[2] =
{
  {
    "tensor_name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorAnnotation, tensor_name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "quant_parameter_tensor_names",
    2,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TensorAnnotation, n_quant_parameter_tensor_names),
    offsetof(OpenCVOnnx__TensorAnnotation, quant_parameter_tensor_names),
    &opencv_onnx__string_string_entry_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__tensor_annotation__field_indices_by_name[] = {
  1,   /* field[1] = quant_parameter_tensor_names */
  0,   /* field[0] = tensor_name */
};
static const ProtobufCIntRange opencv_onnx__tensor_annotation__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__tensor_annotation__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorAnnotation",
  "TensorAnnotation",
  "OpenCVOnnx__TensorAnnotation",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TensorAnnotation),
  2,
  opencv_onnx__tensor_annotation__field_descriptors,
  opencv_onnx__tensor_annotation__field_indices_by_name,
  1,  opencv_onnx__tensor_annotation__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__tensor_annotation__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__graph_proto__field_descriptors[9] =
{
  {
    "node",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_node),
    offsetof(OpenCVOnnx__GraphProto, node),
    &opencv_onnx__node_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__GraphProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "initializer",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_initializer),
    offsetof(OpenCVOnnx__GraphProto, initializer),
    &opencv_onnx__tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    10,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__GraphProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "input",
    11,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_input),
    offsetof(OpenCVOnnx__GraphProto, input),
    &opencv_onnx__value_info_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "output",
    12,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_output),
    offsetof(OpenCVOnnx__GraphProto, output),
    &opencv_onnx__value_info_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "value_info",
    13,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_value_info),
    offsetof(OpenCVOnnx__GraphProto, value_info),
    &opencv_onnx__value_info_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "quantization_annotation",
    14,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_quantization_annotation),
    offsetof(OpenCVOnnx__GraphProto, quantization_annotation),
    &opencv_onnx__tensor_annotation__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sparse_initializer",
    15,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__GraphProto, n_sparse_initializer),
    offsetof(OpenCVOnnx__GraphProto, sparse_initializer),
    &opencv_onnx__sparse_tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__graph_proto__field_indices_by_name[] = {
  3,   /* field[3] = doc_string */
  2,   /* field[2] = initializer */
  4,   /* field[4] = input */
  1,   /* field[1] = name */
  0,   /* field[0] = node */
  5,   /* field[5] = output */
  7,   /* field[7] = quantization_annotation */
  8,   /* field[8] = sparse_initializer */
  6,   /* field[6] = value_info */
};
static const ProtobufCIntRange opencv_onnx__graph_proto__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 5, 2 },
  { 10, 3 },
  { 0, 9 }
};
const ProtobufCMessageDescriptor opencv_onnx__graph_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.GraphProto",
  "GraphProto",
  "OpenCVOnnx__GraphProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__GraphProto),
  9,
  opencv_onnx__graph_proto__field_descriptors,
  opencv_onnx__graph_proto__field_indices_by_name,
  3,  opencv_onnx__graph_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__graph_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__tensor_proto__segment__field_descriptors[2] =
{
  {
    "begin",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto__Segment, begin),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "end",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto__Segment, end),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__tensor_proto__segment__field_indices_by_name[] = {
  0,   /* field[0] = begin */
  1,   /* field[1] = end */
};
static const ProtobufCIntRange opencv_onnx__tensor_proto__segment__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__tensor_proto__segment__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorProto.Segment",
  "Segment",
  "OpenCVOnnx__TensorProto__Segment",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TensorProto__Segment),
  2,
  opencv_onnx__tensor_proto__segment__field_descriptors,
  opencv_onnx__tensor_proto__segment__field_indices_by_name,
  1,  opencv_onnx__tensor_proto__segment__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__tensor_proto__segment__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue opencv_onnx__tensor_proto__data_type__enum_values_by_number[17] =
{
  { "UNDEFINED", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__UNDEFINED", 0 },
  { "FLOAT", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__FLOAT", 1 },
  { "UINT8", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__UINT8", 2 },
  { "INT8", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__INT8", 3 },
  { "UINT16", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__UINT16", 4 },
  { "INT16", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__INT16", 5 },
  { "INT32", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__INT32", 6 },
  { "INT64", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__INT64", 7 },
  { "STRING", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__STRING", 8 },
  { "BOOL", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__BOOL", 9 },
  { "FLOAT16", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__FLOAT16", 10 },
  { "DOUBLE", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__DOUBLE", 11 },
  { "UINT32", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__UINT32", 12 },
  { "UINT64", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__UINT64", 13 },
  { "COMPLEX64", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__COMPLEX64", 14 },
  { "COMPLEX128", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__COMPLEX128", 15 },
  { "BFLOAT16", "OPENCV_ONNX__TENSOR_PROTO__DATA_TYPE__BFLOAT16", 16 },
};
static const ProtobufCIntRange opencv_onnx__tensor_proto__data_type__value_ranges[] = {
{0, 0},{0, 17}
};
static const ProtobufCEnumValueIndex opencv_onnx__tensor_proto__data_type__enum_values_by_name[17] =
{
  { "BFLOAT16", 16 },
  { "BOOL", 9 },
  { "COMPLEX128", 15 },
  { "COMPLEX64", 14 },
  { "DOUBLE", 11 },
  { "FLOAT", 1 },
  { "FLOAT16", 10 },
  { "INT16", 5 },
  { "INT32", 6 },
  { "INT64", 7 },
  { "INT8", 3 },
  { "STRING", 8 },
  { "UINT16", 4 },
  { "UINT32", 12 },
  { "UINT64", 13 },
  { "UINT8", 2 },
  { "UNDEFINED", 0 },
};
const ProtobufCEnumDescriptor opencv_onnx__tensor_proto__data_type__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorProto.DataType",
  "DataType",
  "OpenCVOnnx__TensorProto__DataType",
  "opencv_onnx",
  17,
  opencv_onnx__tensor_proto__data_type__enum_values_by_number,
  17,
  opencv_onnx__tensor_proto__data_type__enum_values_by_name,
  1,
  opencv_onnx__tensor_proto__data_type__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue opencv_onnx__tensor_proto__data_location__enum_values_by_number[2] =
{
  { "DEFAULT", "OPENCV_ONNX__TENSOR_PROTO__DATA_LOCATION__DEFAULT", 0 },
  { "EXTERNAL", "OPENCV_ONNX__TENSOR_PROTO__DATA_LOCATION__EXTERNAL", 1 },
};
static const ProtobufCIntRange opencv_onnx__tensor_proto__data_location__value_ranges[] = {
{0, 0},{0, 2}
};
static const ProtobufCEnumValueIndex opencv_onnx__tensor_proto__data_location__enum_values_by_name[2] =
{
  { "DEFAULT", 0 },
  { "EXTERNAL", 1 },
};
const ProtobufCEnumDescriptor opencv_onnx__tensor_proto__data_location__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorProto.DataLocation",
  "DataLocation",
  "OpenCVOnnx__TensorProto__DataLocation",
  "opencv_onnx",
  2,
  opencv_onnx__tensor_proto__data_location__enum_values_by_number,
  2,
  opencv_onnx__tensor_proto__data_location__enum_values_by_name,
  1,
  opencv_onnx__tensor_proto__data_location__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCFieldDescriptor opencv_onnx__tensor_proto__field_descriptors[14] =
{
  {
    "dims",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT64,
    offsetof(OpenCVOnnx__TensorProto, n_dims),
    offsetof(OpenCVOnnx__TensorProto, dims),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "data_type",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, data_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "segment",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, segment),
    &opencv_onnx__tensor_proto__segment__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "float_data",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_FLOAT,
    offsetof(OpenCVOnnx__TensorProto, n_float_data),
    offsetof(OpenCVOnnx__TensorProto, float_data),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "int32_data",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT32,
    offsetof(OpenCVOnnx__TensorProto, n_int32_data),
    offsetof(OpenCVOnnx__TensorProto, int32_data),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "string_data",
    6,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_BYTES,
    offsetof(OpenCVOnnx__TensorProto, n_string_data),
    offsetof(OpenCVOnnx__TensorProto, string_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "int64_data",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT64,
    offsetof(OpenCVOnnx__TensorProto, n_int64_data),
    offsetof(OpenCVOnnx__TensorProto, int64_data),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "name",
    8,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "raw_data",
    9,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_BYTES,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, raw_data),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "double_data",
    10,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_DOUBLE,
    offsetof(OpenCVOnnx__TensorProto, n_double_data),
    offsetof(OpenCVOnnx__TensorProto, double_data),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "uint64_data",
    11,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_UINT64,
    offsetof(OpenCVOnnx__TensorProto, n_uint64_data),
    offsetof(OpenCVOnnx__TensorProto, uint64_data),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    12,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "external_data",
    13,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TensorProto, n_external_data),
    offsetof(OpenCVOnnx__TensorProto, external_data),
    &opencv_onnx__string_string_entry_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "data_location",
    14,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_ENUM,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorProto, data_location),
    &opencv_onnx__tensor_proto__data_location__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__tensor_proto__field_indices_by_name[] = {
  13,   /* field[13] = data_location */
  1,   /* field[1] = data_type */
  0,   /* field[0] = dims */
  11,   /* field[11] = doc_string */
  9,   /* field[9] = double_data */
  12,   /* field[12] = external_data */
  3,   /* field[3] = float_data */
  4,   /* field[4] = int32_data */
  6,   /* field[6] = int64_data */
  7,   /* field[7] = name */
  8,   /* field[8] = raw_data */
  2,   /* field[2] = segment */
  5,   /* field[5] = string_data */
  10,   /* field[10] = uint64_data */
};
static const ProtobufCIntRange opencv_onnx__tensor_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 14 }
};
const ProtobufCMessageDescriptor opencv_onnx__tensor_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorProto",
  "TensorProto",
  "OpenCVOnnx__TensorProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TensorProto),
  14,
  opencv_onnx__tensor_proto__field_descriptors,
  opencv_onnx__tensor_proto__field_indices_by_name,
  1,  opencv_onnx__tensor_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__tensor_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__sparse_tensor_proto__field_descriptors[3] =
{
  {
    "values",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__SparseTensorProto, values),
    &opencv_onnx__tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "indices",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__SparseTensorProto, indices),
    &opencv_onnx__tensor_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "dims",
    3,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_INT64,
    offsetof(OpenCVOnnx__SparseTensorProto, n_dims),
    offsetof(OpenCVOnnx__SparseTensorProto, dims),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_PACKED,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__sparse_tensor_proto__field_indices_by_name[] = {
  2,   /* field[2] = dims */
  1,   /* field[1] = indices */
  0,   /* field[0] = values */
};
static const ProtobufCIntRange opencv_onnx__sparse_tensor_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor opencv_onnx__sparse_tensor_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.SparseTensorProto",
  "SparseTensorProto",
  "OpenCVOnnx__SparseTensorProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__SparseTensorProto),
  3,
  opencv_onnx__sparse_tensor_proto__field_descriptors,
  opencv_onnx__sparse_tensor_proto__field_indices_by_name,
  1,  opencv_onnx__sparse_tensor_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__sparse_tensor_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__tensor_shape_proto__dimension__field_descriptors[3] =
{
  {
    "dim_value",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    offsetof(OpenCVOnnx__TensorShapeProto__Dimension, value_case),
    offsetof(OpenCVOnnx__TensorShapeProto__Dimension, dim_value),
    NULL,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "dim_param",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__TensorShapeProto__Dimension, value_case),
    offsetof(OpenCVOnnx__TensorShapeProto__Dimension, dim_param),
    NULL,
    &protobuf_c_empty_string,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "denotation",
    3,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TensorShapeProto__Dimension, denotation),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__tensor_shape_proto__dimension__field_indices_by_name[] = {
  2,   /* field[2] = denotation */
  1,   /* field[1] = dim_param */
  0,   /* field[0] = dim_value */
};
static const ProtobufCIntRange opencv_onnx__tensor_shape_proto__dimension__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 3 }
};
const ProtobufCMessageDescriptor opencv_onnx__tensor_shape_proto__dimension__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorShapeProto.Dimension",
  "Dimension",
  "OpenCVOnnx__TensorShapeProto__Dimension",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TensorShapeProto__Dimension),
  3,
  opencv_onnx__tensor_shape_proto__dimension__field_descriptors,
  opencv_onnx__tensor_shape_proto__dimension__field_indices_by_name,
  1,  opencv_onnx__tensor_shape_proto__dimension__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__tensor_shape_proto__dimension__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__tensor_shape_proto__field_descriptors[1] =
{
  {
    "dim",
    1,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TensorShapeProto, n_dim),
    offsetof(OpenCVOnnx__TensorShapeProto, dim),
    &opencv_onnx__tensor_shape_proto__dimension__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__tensor_shape_proto__field_indices_by_name[] = {
  0,   /* field[0] = dim */
};
static const ProtobufCIntRange opencv_onnx__tensor_shape_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor opencv_onnx__tensor_shape_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TensorShapeProto",
  "TensorShapeProto",
  "OpenCVOnnx__TensorShapeProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TensorShapeProto),
  1,
  opencv_onnx__tensor_shape_proto__field_descriptors,
  opencv_onnx__tensor_shape_proto__field_indices_by_name,
  1,  opencv_onnx__tensor_shape_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__tensor_shape_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__tensor__field_descriptors[2] =
{
  {
    "elem_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Tensor, elem_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "shape",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Tensor, shape),
    &opencv_onnx__tensor_shape_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__tensor__field_indices_by_name[] = {
  0,   /* field[0] = elem_type */
  1,   /* field[1] = shape */
};
static const ProtobufCIntRange opencv_onnx__type_proto__tensor__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__tensor__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto.Tensor",
  "Tensor",
  "OpenCVOnnx__TypeProto__Tensor",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto__Tensor),
  2,
  opencv_onnx__type_proto__tensor__field_descriptors,
  opencv_onnx__type_proto__tensor__field_indices_by_name,
  1,  opencv_onnx__type_proto__tensor__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__tensor__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__sequence__field_descriptors[1] =
{
  {
    "elem_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Sequence, elem_type),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__sequence__field_indices_by_name[] = {
  0,   /* field[0] = elem_type */
};
static const ProtobufCIntRange opencv_onnx__type_proto__sequence__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__sequence__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto.Sequence",
  "Sequence",
  "OpenCVOnnx__TypeProto__Sequence",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto__Sequence),
  1,
  opencv_onnx__type_proto__sequence__field_descriptors,
  opencv_onnx__type_proto__sequence__field_indices_by_name,
  1,  opencv_onnx__type_proto__sequence__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__sequence__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__map__field_descriptors[2] =
{
  {
    "key_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Map, key_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "value_type",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Map, value_type),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__map__field_indices_by_name[] = {
  0,   /* field[0] = key_type */
  1,   /* field[1] = value_type */
};
static const ProtobufCIntRange opencv_onnx__type_proto__map__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__map__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto.Map",
  "Map",
  "OpenCVOnnx__TypeProto__Map",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto__Map),
  2,
  opencv_onnx__type_proto__map__field_descriptors,
  opencv_onnx__type_proto__map__field_indices_by_name,
  1,  opencv_onnx__type_proto__map__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__map__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__optional__field_descriptors[1] =
{
  {
    "elem_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__Optional, elem_type),
    &opencv_onnx__type_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__optional__field_indices_by_name[] = {
  0,   /* field[0] = elem_type */
};
static const ProtobufCIntRange opencv_onnx__type_proto__optional__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 1 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__optional__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto.Optional",
  "Optional",
  "OpenCVOnnx__TypeProto__Optional",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto__Optional),
  1,
  opencv_onnx__type_proto__optional__field_descriptors,
  opencv_onnx__type_proto__optional__field_indices_by_name,
  1,  opencv_onnx__type_proto__optional__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__optional__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__sparse_tensor__field_descriptors[2] =
{
  {
    "elem_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT32,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__SparseTensor, elem_type),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "shape",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto__SparseTensor, shape),
    &opencv_onnx__tensor_shape_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__sparse_tensor__field_indices_by_name[] = {
  0,   /* field[0] = elem_type */
  1,   /* field[1] = shape */
};
static const ProtobufCIntRange opencv_onnx__type_proto__sparse_tensor__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__sparse_tensor__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto.SparseTensor",
  "SparseTensor",
  "OpenCVOnnx__TypeProto__SparseTensor",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto__SparseTensor),
  2,
  opencv_onnx__type_proto__sparse_tensor__field_descriptors,
  opencv_onnx__type_proto__sparse_tensor__field_indices_by_name,
  1,  opencv_onnx__type_proto__sparse_tensor__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__sparse_tensor__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__type_proto__field_descriptors[6] =
{
  {
    "tensor_type",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TypeProto, value_case),
    offsetof(OpenCVOnnx__TypeProto, tensor_type),
    &opencv_onnx__type_proto__tensor__descriptor,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sequence_type",
    4,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TypeProto, value_case),
    offsetof(OpenCVOnnx__TypeProto, sequence_type),
    &opencv_onnx__type_proto__sequence__descriptor,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "map_type",
    5,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TypeProto, value_case),
    offsetof(OpenCVOnnx__TypeProto, map_type),
    &opencv_onnx__type_proto__map__descriptor,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "denotation",
    6,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__TypeProto, denotation),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "sparse_tensor_type",
    8,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TypeProto, value_case),
    offsetof(OpenCVOnnx__TypeProto, sparse_tensor_type),
    &opencv_onnx__type_proto__sparse_tensor__descriptor,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "optional_type",
    9,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__TypeProto, value_case),
    offsetof(OpenCVOnnx__TypeProto, optional_type),
    &opencv_onnx__type_proto__optional__descriptor,
    NULL,
    0 | PROTOBUF_C_FIELD_FLAG_ONEOF,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__type_proto__field_indices_by_name[] = {
  3,   /* field[3] = denotation */
  2,   /* field[2] = map_type */
  5,   /* field[5] = optional_type */
  1,   /* field[1] = sequence_type */
  4,   /* field[4] = sparse_tensor_type */
  0,   /* field[0] = tensor_type */
};
static const ProtobufCIntRange opencv_onnx__type_proto__number_ranges[3 + 1] =
{
  { 1, 0 },
  { 4, 1 },
  { 8, 4 },
  { 0, 6 }
};
const ProtobufCMessageDescriptor opencv_onnx__type_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.TypeProto",
  "TypeProto",
  "OpenCVOnnx__TypeProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__TypeProto),
  6,
  opencv_onnx__type_proto__field_descriptors,
  opencv_onnx__type_proto__field_indices_by_name,
  3,  opencv_onnx__type_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__type_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__operator_set_id_proto__field_descriptors[2] =
{
  {
    "domain",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__OperatorSetIdProto, domain),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "version",
    2,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_INT64,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__OperatorSetIdProto, version),
    NULL,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__operator_set_id_proto__field_indices_by_name[] = {
  0,   /* field[0] = domain */
  1,   /* field[1] = version */
};
static const ProtobufCIntRange opencv_onnx__operator_set_id_proto__number_ranges[1 + 1] =
{
  { 1, 0 },
  { 0, 2 }
};
const ProtobufCMessageDescriptor opencv_onnx__operator_set_id_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.OperatorSetIdProto",
  "OperatorSetIdProto",
  "OpenCVOnnx__OperatorSetIdProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__OperatorSetIdProto),
  2,
  opencv_onnx__operator_set_id_proto__field_descriptors,
  opencv_onnx__operator_set_id_proto__field_indices_by_name,
  1,  opencv_onnx__operator_set_id_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__operator_set_id_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCFieldDescriptor opencv_onnx__function_proto__field_descriptors[8] =
{
  {
    "name",
    1,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__FunctionProto, name),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "input",
    4,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__FunctionProto, n_input),
    offsetof(OpenCVOnnx__FunctionProto, input),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "output",
    5,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__FunctionProto, n_output),
    offsetof(OpenCVOnnx__FunctionProto, output),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "attribute",
    6,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_STRING,
    offsetof(OpenCVOnnx__FunctionProto, n_attribute),
    offsetof(OpenCVOnnx__FunctionProto, attribute),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "node",
    7,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__FunctionProto, n_node),
    offsetof(OpenCVOnnx__FunctionProto, node),
    &opencv_onnx__node_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "doc_string",
    8,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__FunctionProto, doc_string),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "opset_import",
    9,
    PROTOBUF_C_LABEL_REPEATED,
    PROTOBUF_C_TYPE_MESSAGE,
    offsetof(OpenCVOnnx__FunctionProto, n_opset_import),
    offsetof(OpenCVOnnx__FunctionProto, opset_import),
    &opencv_onnx__operator_set_id_proto__descriptor,
    NULL,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
  {
    "domain",
    10,
    PROTOBUF_C_LABEL_NONE,
    PROTOBUF_C_TYPE_STRING,
    0,   /* quantifier_offset */
    offsetof(OpenCVOnnx__FunctionProto, domain),
    NULL,
    &protobuf_c_empty_string,
    0,             /* flags */
    0,NULL,NULL    /* reserved1,reserved2, etc */
  },
};
static const unsigned opencv_onnx__function_proto__field_indices_by_name[] = {
  3,   /* field[3] = attribute */
  5,   /* field[5] = doc_string */
  7,   /* field[7] = domain */
  1,   /* field[1] = input */
  0,   /* field[0] = name */
  4,   /* field[4] = node */
  6,   /* field[6] = opset_import */
  2,   /* field[2] = output */
};
static const ProtobufCIntRange opencv_onnx__function_proto__number_ranges[2 + 1] =
{
  { 1, 0 },
  { 4, 1 },
  { 0, 8 }
};
const ProtobufCMessageDescriptor opencv_onnx__function_proto__descriptor =
{
  PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC,
  "opencv_onnx.FunctionProto",
  "FunctionProto",
  "OpenCVOnnx__FunctionProto",
  "opencv_onnx",
  sizeof(OpenCVOnnx__FunctionProto),
  8,
  opencv_onnx__function_proto__field_descriptors,
  opencv_onnx__function_proto__field_indices_by_name,
  2,  opencv_onnx__function_proto__number_ranges,
  (ProtobufCMessageInit) opencv_onnx__function_proto__init,
  NULL,NULL,NULL    /* reserved[123] */
};
static const ProtobufCEnumValue opencv_onnx__version__enum_values_by_number[9] =
{
  { "_START_VERSION", "OPENCV_ONNX__VERSION___START_VERSION", 0 },
  { "IR_VERSION_2017_10_10", "OPENCV_ONNX__VERSION__IR_VERSION_2017_10_10", 1 },
  { "IR_VERSION_2017_10_30", "OPENCV_ONNX__VERSION__IR_VERSION_2017_10_30", 2 },
  { "IR_VERSION_2017_11_3", "OPENCV_ONNX__VERSION__IR_VERSION_2017_11_3", 3 },
  { "IR_VERSION_2019_1_22", "OPENCV_ONNX__VERSION__IR_VERSION_2019_1_22", 4 },
  { "IR_VERSION_2019_3_18", "OPENCV_ONNX__VERSION__IR_VERSION_2019_3_18", 5 },
  { "IR_VERSION_2019_9_19", "OPENCV_ONNX__VERSION__IR_VERSION_2019_9_19", 6 },
  { "IR_VERSION_2020_5_8", "OPENCV_ONNX__VERSION__IR_VERSION_2020_5_8", 7 },
  { "IR_VERSION", "OPENCV_ONNX__VERSION__IR_VERSION", 8 },
};
static const ProtobufCIntRange opencv_onnx__version__value_ranges[] = {
{0, 0},{0, 9}
};
static const ProtobufCEnumValueIndex opencv_onnx__version__enum_values_by_name[9] =
{
  { "IR_VERSION", 8 },
  { "IR_VERSION_2017_10_10", 1 },
  { "IR_VERSION_2017_10_30", 2 },
  { "IR_VERSION_2017_11_3", 3 },
  { "IR_VERSION_2019_1_22", 4 },
  { "IR_VERSION_2019_3_18", 5 },
  { "IR_VERSION_2019_9_19", 6 },
  { "IR_VERSION_2020_5_8", 7 },
  { "_START_VERSION", 0 },
};
const ProtobufCEnumDescriptor opencv_onnx__version__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "opencv_onnx.Version",
  "Version",
  "OpenCVOnnx__Version",
  "opencv_onnx",
  9,
  opencv_onnx__version__enum_values_by_number,
  9,
  opencv_onnx__version__enum_values_by_name,
  1,
  opencv_onnx__version__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
static const ProtobufCEnumValue opencv_onnx__operator_status__enum_values_by_number[2] =
{
  { "EXPERIMENTAL", "OPENCV_ONNX__OPERATOR_STATUS__EXPERIMENTAL", 0 },
  { "STABLE", "OPENCV_ONNX__OPERATOR_STATUS__STABLE", 1 },
};
static const ProtobufCIntRange opencv_onnx__operator_status__value_ranges[] = {
{0, 0},{0, 2}
};
static const ProtobufCEnumValueIndex opencv_onnx__operator_status__enum_values_by_name[2] =
{
  { "EXPERIMENTAL", 0 },
  { "STABLE", 1 },
};
const ProtobufCEnumDescriptor opencv_onnx__operator_status__descriptor =
{
  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
  "opencv_onnx.OperatorStatus",
  "OperatorStatus",
  "OpenCVOnnx__OperatorStatus",
  "opencv_onnx",
  2,
  opencv_onnx__operator_status__enum_values_by_number,
  2,
  opencv_onnx__operator_status__enum_values_by_name,
  1,
  opencv_onnx__operator_status__value_ranges,
  NULL,NULL,NULL,NULL   /* reserved[1234] */
};
